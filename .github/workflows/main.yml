name: Test Project
on: [ push, pull_request ]
jobs:
  run-test:
    name: Run Tests of project
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test_db
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      - name: Get composer cache directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Configure Laravel Application
        run: |
          cp .env.example .env
          php artisan cache:clear
          php artisan config:clear
          php artisan key:generate
          chmod -R 777 storage bootstrap/cache

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Run testsuite
        run: vendor/bin/phpunit
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: ${{ job.services.mysql.env.MYSQL_DATABASE }}
          DB_PORT: ${{ job.services.mysql.ports[3306] }}

  build-assets:
    name: Build JS & CSS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      - name: Get composer cache directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install npm dependencies & build
        run: |
          npm ci
          npm run production

      - name: Upload built assets
        uses: actions/upload-artifact@v2
        with:
          name: assets
          path: public

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
#    needs: [run-test, build-assets]
    needs: build-assets
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'

      - name: Download built assets
        uses: actions/download-artifact@v2
        with:
          name: assets
          path: public

#      - name: Deploy
#        uses: deployphp/action@master
#        env:
#          DOT_ENV: ${{ secrets.DOT_ENV }}
#          SSH_HOST: ${{ secrets.SSH_HOST }}
#          SSH_USER: ${{ secrets.SSH_USER }}
#          SSH_PORT: ${{ secrets.SSH_PORT }}
#        with:
#          private-key: ${{ secrets.SSH_PKEY }}
#          known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
#          dep: deploy production --tag=${{ env.GITHUB_REF }} -vvv

      - name: Setup Deployer
        uses: atymic/deployer-php-action@master
        with:
          ssh-private-key: ${{ secrets.SSH_PKEY }}
          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy
        env:
          DOT_ENV: ${{ secrets.DOT_ENV }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: dep deploy production --tag=${{ env.GITHUB_REF }} -vvv
